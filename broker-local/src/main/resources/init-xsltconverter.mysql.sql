INSERT INTO `xsltconverter` (`creation_time`, `description`, `visibility`, `name`, `stylesheet`, `owner_name`)
VALUES
  (0,'Conversion of the TEI (Text Encoding Initiative) format to HTML, for further processing with e-Services.',1,'tei2temp-html','<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" exclude-result-prefixes=\"tei xs\"\n    xmlns:tei=\"http://www.tei-c.org/ns/1.0\" version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\">\n    <xsl:output method=\"html\" indent=\"yes\"/>\n    <xsl:template match=\"/\">\n        <html>\n            <head>\n                <title>dummy title</title>\n            </head>\n            <body>\n                <div id=\"xyz1xyz\">\n                    <xsl:for-each select=\"//tei:text/tei:body//tei:p\">\n                        <xsl:variable name=\"number\">n<xsl:number level=\"any\"/></xsl:variable>\n                        <p id=\"{$number}\">\n                            <xsl:apply-templates mode=\"renameElem\"/>\n                        </p>\n                    </xsl:for-each>\n                </div>\n            </body>\n        </html>\n    </xsl:template>\n    <xsl:template mode=\"renameElem\" match=\"*\">\n        <xsl:variable name=\"attributeValuePairs\">\n            <xsl:for-each select=\"@*\">\n                <xsl:text>@@@delim@@@name:</xsl:text>\n                <xsl:value-of select=\"name()\"/>\n                <xsl:text>@@@value:</xsl:text>\n                <xsl:value-of select=\".\"/>\n                <xsl:if test=\"position() = last()\">\n                    <xsl:text>@@@delim@@@</xsl:text>\n                </xsl:if>\n            </xsl:for-each>\n        </xsl:variable>\n        <span xmlns=\"http://www.w3.org/1999/xhtml\" title=\"{$attributeValuePairs}\"\n            class=\"{concat(\'convert-\',name())}\">\n            <xsl:apply-templates mode=\"renameElem\"/>\n        </span>\n    </xsl:template>\n</xsl:stylesheet>\n','admin'),
  (0,'Conversion of the input to identical output. Can be used e.g. to transform HTML5 to XHTML5.',1,'identity-transformation','<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    exclude-result-prefixes=\"xs\"\n    version=\"2.0\">\n    <xsl:template match=\"node()|@*\">\n        <xsl:copy>\n            <xsl:apply-templates select=\"node()|@*\"></xsl:apply-templates>\n        </xsl:copy>\n    </xsl:template>\n</xsl:stylesheet>','admin'),
  (0,'A stylesheet that uses XSLT 3.0 functionality.',1,'xslt-30-test','<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" exclude-result-prefixes=\"xs\"\n    xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" version=\"3.0\">\n    <xsl:variable name=\"input\"> &lt;its:locQualityIssues xml:id=\"lq1\"\n        xmlns:its=\"http://www.w3.org/2005/11/its\"&gt; &lt;its:locQualityIssue\n        locQualityIssueType=\"misspelling\" locQualityIssueComment=\"\'c\'es\' is unknown. Could be\n        \'c\'est\'\" locQualityIssueSeverity=\"50\"/&gt; &lt;its:locQualityIssue\n        locQualityIssueType=\"typographical\" locQualityIssueComment=\"Sentence without capitalization\"\n        locQualityIssueSeverity=\"30\"/&gt; &lt;/its:locQualityIssues&gt;</xsl:variable>\n    <xsl:template match=\"/\">\n        <xsl:value-of select=\"count(fn:parse-xml($input)//*)\"/>\n    </xsl:template>\n</xsl:stylesheet>\n','admin'),
  (0,'Conversion of XLIFF 2.0 to HTML, for further processing with e-Services.',1,'xliff20-to-html','<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" exclude-result-prefixes=\"xlf xs\"\n    xmlns:xlf=\"urn:oasis:names:tc:xliff:document:2.0\" version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\">\n    <xsl:output method=\"xml\" indent=\"yes\" omit-xml-declaration=\"yes\"/>\n    <xsl:template match=\"/\">\n        <html>\n            <head>\n                <title>@@@</title>\n                <script type=\"application/xml\">\n                    <xsl:apply-templates select=\"/\" mode=\"copyFragment\"/>\n                </script>\n            </head>\n            <body>\n                <div id=\"xyz1xyz\">\n                    <xsl:for-each select=\"//xlf:source\">\n                        <xsl:variable name=\"number\">n<xsl:number level=\"any\"/></xsl:variable>\n                        <p id=\"{$number}\">\n                            <xsl:apply-templates mode=\"renameElem\"/>\n                        </p>\n                    </xsl:for-each>\n                </div>\n            </body>\n        </html>\n    </xsl:template>\n    <xsl:template mode=\"copyFragment\" match=\"node()|@*\">\n        <xsl:copy>\n            <xsl:apply-templates select=\"node()|@*\" mode=\"copyFragment\"/>\n        </xsl:copy>\n    </xsl:template>\n    <xsl:template mode=\"copyFragment\" match=\"xlf:source\">\n        <xsl:variable name=\"number\">n<xsl:number level=\"any\"/></xsl:variable>\n        <anchor id=\"{$number}\"/>\n    </xsl:template>\n    <xsl:template mode=\"renameElem\" match=\"*\">\n        <xsl:variable name=\"attributeValuePairs\">\n            <xsl:for-each select=\"@*\">\n                <xsl:text>@@@delim@@@name:</xsl:text>\n                <xsl:value-of select=\"name()\"/>\n                <xsl:text>@@@value:</xsl:text>\n                <xsl:value-of select=\".\"/>\n                <xsl:if test=\"position() = last()\">\n                    <xsl:text>@@@delim@@@</xsl:text>\n                </xsl:if>\n            </xsl:for-each>\n        </xsl:variable>\n        <span xmlns=\"http://www.w3.org/1999/xhtml\" title=\"{$attributeValuePairs}\"\n            class=\"{concat(\'convert-\',name())}\">\n            <xsl:apply-templates mode=\"renameElem\"/>\n        </span>\n    </xsl:template>\n</xsl:stylesheet>\n','admin'),
  (0,'Stylesheet with global parameter. The parameter can be set while calling the stylesheet.',1,'xslt-with-param','<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\">\n    <xsl:param name=\"myparam\">set internally</xsl:param>\n    <xsl:template match=\"/\">\n        <xsl:value-of select=\"$myparam\"/>\n    </xsl:template>\n</xsl:stylesheet>','admin'),
  (0,'Conversion of HTML to XLIFF 2.0. The stylesheet currently processes only e-Entity output.',1,'html-to-xliff20','<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:itsm=\"urn:oasis:names:tc:xliff:itsm:2.1\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    exclude-result-prefixes=\"xs h xlf fn\" xmlns:xlf=\"urn:oasis:names:tc:xliff:document:2.0\"\n    version=\"3.0\" xmlns:h=\"http://www.w3.org/1999/xhtml\"\n    xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns=\"urn:oasis:names:tc:xliff:document:2.0\">\n    <xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>\n    <xsl:variable name=\"originalInputDoc\">\n        <xsl:copy-of select=\"fn:parse-xml(//*[local-name()=\'script\'])\"/>\n    </xsl:variable>\n    <xsl:variable name=\"htmlDoc\">\n        <xsl:copy-of select=\"/*\"/>\n    </xsl:variable>\n    <xsl:template match=\"/\">\n        <xsl:apply-templates select=\"$originalInputDoc/node()\" mode=\"copy\"/>\n    </xsl:template>\n    <xsl:template match=\"node() | @*\" mode=\"copy\">\n        <xsl:copy>\n            <xsl:apply-templates select=\"node() | @*\" mode=\"copy\"/>\n        </xsl:copy>\n    </xsl:template>\n    <xsl:template match=\"h:anchor\" mode=\"copy\">\n        <source>\n            <xsl:variable name=\"position\">n<xsl:number level=\"any\"/></xsl:variable>\n            <xsl:for-each select=\"$htmlDoc\">\n                <xsl:apply-templates select=\"//*[@id = $position]/node()\" mode=\"writeAnnotation\"/>\n            </xsl:for-each>\n        </source>\n    </xsl:template>\n    <xsl:template match=\"span[@class[starts-with(., \'convert-\')]]\" mode=\"writeAnnotation\">\n        <xsl:element name=\"{substring-after(@class,\'convert-\')}\">\n            <xsl:if test=\"string-length(@title) > 0\">\n                <xsl:call-template name=\"writeAttrs\">\n                    <xsl:with-param name=\"attList\" select=\"@title\"/>\n                </xsl:call-template>\n            </xsl:if>\n            <xsl:apply-templates mode=\"writeAnnotation\"/>\n        </xsl:element>\n    </xsl:template>\n    <xsl:template mode=\"writeAnnotation\" match=\"*[local-name()=\'span\' and @its-ta-ident-ref]\">\n        <mrk id=\"{generate-id()}\" type=\"itsm:generic\">\n            <xsl:attribute name=\"itsm:taIdentRef\">\n                <xsl:value-of select=\"@its-ta-ident-ref\"/>\n            </xsl:attribute>\n            <xsl:value-of select=\".\"/>\n        </mrk>\n    </xsl:template>\n    <xsl:template name=\"writeAttrs\">\n        <xsl:param name=\"attList\"/>\n        <xsl:variable name=\"name\"\n            select=\"substring-before(substring-after($attList, \'@@@delim@@@name:\'), \'@@@value:\')\"/>\n        <xsl:variable name=\"value\"\n            select=\"substring-before(substring-after($attList, \'@@@value:\'), \'@@@delim@@@\')\"/>\n        <xsl:if test=\"($name)\">\n            <xsl:attribute name=\"{$name}\">\n                <xsl:value-of select=\"$value\"/>\n            </xsl:attribute>\n            <xsl:variable name=\"rest\">\n                <xsl:value-of\n                    select=\"substring($attList, string-length(concat(\'@@@delim@@@name:\', $name, \'@@@value:\', $value)) + 1)\"\n                />\n            </xsl:variable>\n            <xsl:if test=\"$rest\">\n                <xsl:call-template name=\"writeAttrs\">\n                    <xsl:with-param name=\"attList\" select=\"$rest\"/>\n                </xsl:call-template>\n            </xsl:if>\n        </xsl:if>\n    </xsl:template>\n</xsl:stylesheet>\n','admin'),
  (0,'Conversion of TBX to Schema-dot-org',1,'tbx-to-schema-dot-org','<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Conversion of TBX to schema-dot-org\nTested with some examples from \nhttps://github.com/cimiano/tbx2rdf/blob/master/samples/. -->\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:schema=\"http://schema.org/\"\n    exclude-result-prefixes=\"xs schema rdf\"\n    version=\"2.0\">\n    <xsl:output method=\"html\" indent=\"yes\"/>\n    <xsl:param name=\"outputType\">json-ld</xsl:param>\n    <xsl:template match=\"/\">\n        <xsl:choose>\n            <xsl:when test=\"$outputType=\'rdf-xml-output\'\">\n                <xsl:call-template name=\"rdf-xml-output\"/>\n            </xsl:when>\n            <xsl:when test=\"$outputType=\'json-ld\'\">\n                <xsl:call-template name=\"json-ld-output\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:call-template name=\"json-ld-output\"/>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n    <xsl:template name=\"json-ld-output\">\n<script type=\"application/ld+json\"><xsl:text>[</xsl:text>\n<xsl:for-each select=\"//termEntry\">\n<xsl:for-each select=\"langSet\">\n<xsl:text>{\n\"@context\": \"http://schema.org/\",</xsl:text>\n<xsl:variable name=\"pos\"><xsl:number count=\"termEntry/langSet\" level=\"single\"/></xsl:variable>\n<xsl:variable name=\"id\"><xsl:value-of select=\"concat(parent::termEntry/@id,\'-\',$pos)\"/></xsl:variable>\n<xsl:text>&#xA;\"@id\": \"</xsl:text><xsl:value-of select=\"$id\"/>\",\n<xsl:if test=\"position() &gt; 1\">\n<xsl:variable name=\"id-first-langset\"><xsl:value-of select=\"concat(parent::termEntry/@id,\'-1\')\"/></xsl:variable>\n<xsl:text>\"sameAs\" : \"</xsl:text><xsl:value-of select=\"$id-first-langset\"/>\",\n</xsl:if>\n<xsl:text>\"@type\": \"CreativeWork\",</xsl:text>\n<xsl:text>&#xA;\"inLanguage\": \"</xsl:text><xsl:value-of select=\"@xml:lang\"/>\",\n    <xsl:text>\"name\": \"</xsl:text><xsl:for-each select=\".//term\"><xsl:value-of select=\"replace(.,\'&quot;\',\'\\\\&quot;\')\"/><xsl:if test=\"not(position()=last())\">,&#x20;</xsl:if></xsl:for-each><xsl:text>\"</xsl:text>\n<xsl:text>}</xsl:text><xsl:if test=\"not(position()=last())\">,&#xA;</xsl:if>\n</xsl:for-each>\n<xsl:if test=\"not(position()=last())\">,&#xA;</xsl:if>\n</xsl:for-each>\n<xsl:text>]</xsl:text></script>\n    </xsl:template>\n    <xsl:template name=\"rdf-xml-output\">\n        <rdf:RDF xmlns:schema=\"http://schema.org/\">\n        <xsl:for-each select=\"//termEntry\">\n            <xsl:for-each select=\"langSet\">\n            <xsl:variable name=\"pos\"><xsl:number count=\"termEntry/langSet\" level=\"single\"/></xsl:variable>\n            <xsl:variable name=\"id\"><xsl:value-of select=\"concat(parent::termEntry/@id,\'-\',$pos)\"/></xsl:variable>\n            <schema:CreativeWork rdf:about=\"{$id}\">\n                <xsl:if test=\"position() &gt; 1\">\n                    <xsl:variable name=\"id-first-langset\"><xsl:value-of select=\"concat(parent::termEntry/@id,\'-1\')\"/></xsl:variable>\n                    <schema:sameAs rdf:resource=\"{$id-first-langset}\"/>\n                </xsl:if>\n                <schema:name><xsl:for-each select=\".//term\"><xsl:value-of select=\".\"/><xsl:if test=\"not(position()=last())\">,&#x20;</xsl:if></xsl:for-each><xsl:text>\"</xsl:text></schema:name>\n                <schema:inLanguage><xsl:value-of select=\"@xml:lang\"/></schema:inLanguage>\n            </schema:CreativeWork>\n            </xsl:for-each>\n        </xsl:for-each>\n        </rdf:RDF>\n    </xsl:template>\n</xsl:stylesheet>','admin');
  (0,'Conversion of e-terminology output to schema.org',1,'e-terminology-to-schema-dot-org','<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    exclude-result-prefixes=\"xs rdf ontolex tbx xsd nif sr\"\n    xmlns:sr=\"http://www.w3.org/2005/sparql-results#\"\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:ontolex=\"http://www.w3.org/ns/lemon/ontolex#\"\n    xmlns:tbx=\"http://tbx2rdf.lider-project.eu/tbx#\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\"\n    xmlns:nif=\"http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#\" \n    version=\"2.0\">\n    <xsl:output method=\"html\" indent=\"yes\"/>\n    <xsl:template match=\"/\">\n        <script type=\"application/ld+json\"><xsl:text>[&#xA;</xsl:text>\n            <xsl:for-each select=\"/sr:sparql/sr:results/sr:result[sr:binding[@name=\'lexEntry\']]\">\n                    <xsl:text>{\n\"@context\": \"http://schema.org/\", &#xA;\"@id\" : \"</xsl:text> <xsl:value-of select=\"sr:binding[@name=\'lexEntry\']/sr:literal\"/><xsl:text>\",&#xA;\"type\" : \"CreativeWork\",&#xA;\"inLanguage\" : \"EN\",</xsl:text>\n                <xsl:text>&#xA;\"name\" : \"</xsl:text><xsl:value-of select=\"sr:binding[@name=\'new_writtenRep\']/sr:literal\"/><xsl:text>\"&#xA;}</xsl:text> \n                <xsl:if test=\"not(position()=last())\">,&#xA;</xsl:if>\n            </xsl:for-each>\n            <xsl:text>&#xA;,&#xA;</xsl:text>\n            <xsl:for-each select=\"/sr:sparql/sr:results/sr:result[sr:binding[@name=\'new_delexEntry\']]\">\n                <xsl:text>{\n\"@context\": \"http://schema.org/\", &#xA;\"@id\" : \"</xsl:text> <xsl:value-of select=\"concat(sr:binding[@name=\'lexEntry\']/sr:literal,\'-in-de\')\"/><xsl:text>\",&#xA;\"type\" : \"CreativeWork\",&#xA;\"inLanguage\" : \"DE\",</xsl:text>\n                <xsl:text>&#xA;\"name\" : \"</xsl:text><xsl:value-of select=\"sr:binding[@name=\'new_dewrittenRep\']/sr:literal\"/>\n                <xsl:text>\",&#xA;\"sameAs\" : \"</xsl:text><xsl:value-of select=\"sr:binding[@name=\'lexEntry\']/sr:literal\"/>\n                <xsl:text>\"&#xA;}</xsl:text> \n                <xsl:if test=\"not(position()=last())\">,&#xA;</xsl:if>\n            </xsl:for-each>\n            <xsl:text>&#xA;]</xsl:text>\n        </script>\n    </xsl:template>\n</xsl:stylesheet>','admin');

